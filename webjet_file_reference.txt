# File Reference Guide

Quick reference for all files in the Webjet Forecasting Application.

## 📋 File Overview

| File | Lines | Status | Description |
|------|-------|--------|-------------|
| `main.py` | ~150 | ✅ Complete | Main app with navigation and sidebar |
| `data_generator.py` | ~200 | ✅ Complete | Synthetic data generation with realistic patterns |
| `utils.py` | ~300 | ✅ Complete | Shared utility functions and helpers |
| `page1_data_acquisition.py` | ~300 | ✅ Complete | Data loading, validation, and quality checks |
| `page2_eda.py` | ~50 | 🚧 Placeholder | Exploratory data analysis |
| `page3_preprocessing.py` | ~50 | 🚧 Placeholder | Feature engineering and preprocessing |
| `page4_modeling.py` | ~50 | 🚧 Placeholder | Model training and comparison |
| `page5_forecasting.py` | ~50 | 🚧 Placeholder | Forecast generation and validation |
| `page6_deployment.py` | ~50 | 🚧 Placeholder | Business insights and deployment |
| `page7_mlops.py` | ~50 | 🚧 Placeholder | MLOps monitoring and maintenance |
| `requirements.txt` | ~12 | ✅ Complete | Python package dependencies |

---

## 📄 Detailed File Breakdown

### 1. main.py

**Purpose:** Application entry point with navigation

**Key Components:**
- `st.set_page_config()` - App configuration
- Custom CSS styling
- Sidebar navigation with radio buttons
- Progress indicator (Step X/7)
- Quick stats panel (when data loaded)
- Reset all functionality
- Dynamic page loading with `importlib`

**Session State Keys Used:**
- `current_page` - Active page name

**External Dependencies:**
- All page modules (page1-7)
- utils module

---

### 2. data_generator.py

**Purpose:** Generate realistic synthetic flight booking data

**Key Functions:**

#### `generate_synthetic_data(start_date, end_date, seed=42)`
- **Returns:** DataFrame with 8 columns
- **Patterns Implemented:**
  - Weekly seasonality (Thu/Fri peaks)
  - Yearly seasonality (Dec/Jan peaks)
  - Growth trend (~30 bookings/year)
  - COVID-19 impact (Mar 2020 - Nov 2021)
  - School holidays (AU/NZ calendar)
  - Public holidays
  - Random noise (±10%)
  - Outliers (1-2%)
  - Missing values (1-2%)

#### `get_data_summary(df)`
- **Returns:** Dict with comprehensive summary stats
- **Includes:** Date range, missing values, numeric statistics

**Generated Columns:**
1. `date` - Daily date
2. `bookings` - Target variable (int)
3. `day_of_week` - 0-6 (Monday-Sunday)
4. `marketing_spend` - Daily marketing budget ($)
5. `competitor_price_index` - Price index (100=baseline)
6. `is_holiday` - Boolean for public holidays
7. `is_school_holiday` - Boolean for school holidays
8. `weather_disruption_index` - Weather impact (0-10)

**Configuration:**
- Base bookings: 400
- Growth rate: 30 bookings/year
- COVID impact: 80% reduction at peak
- School holiday boost: 25% increase
- Public holiday impact: 30% decrease

---

### 3. utils.py

**Purpose:** Shared utility functions used across all pages

**Key Function Categories:**

#### Session State Management
- `save_to_session(key, value)` - Store in session
- `load_from_session(key, default=None)` - Retrieve from session
- `clear_session_key(key)` - Remove specific key
- `clear_all_session(exclude=[])` - Clear all except specified

#### Data Quality Validation
- `validate_data_quality(df)` - Comprehensive validation
  - Returns: Dict with checks, issues, warnings, summary
  - Checks: Required columns, duplicates, gaps, missing values, outliers, data types, negatives
  
- `detect_outliers(df, column, method, threshold)` - Outlier detection
  - Methods: 'zscore' (default threshold=3), 'iqr' (default threshold=1.5)
  - Returns: DataFrame of outlier rows

#### Formatting & Display
- `format_number(num, decimals=0)` - Thousands separator
- `format_percentage(num, decimals=1)` - Percentage format
- `create_metric_card(label, value, delta=None)` - HTML metric card
- `get_status_badge(status, message)` - Colored status badge
  - Status types: 'success', 'warning', 'error', 'info'

#### Statistical Utilities
- `calculate_basic_stats(series)` - Mean, median, std, quartiles, missing
- `get_date_features(date)` - Extract date components

#### Data Export
- `convert_df_to_csv(df)` - Convert to downloadable CSV

#### Validation Helpers
- `check_data_loaded(data_key)` - Check if data exists, show warning if not

---

### 4. page1_data_acquisition.py

**Purpose:** Load and validate data (first step in workflow)

**Key Sections:**

#### 1. Data Source Selection
- Radio button: "Generate Synthetic Data" | "Upload CSV File"

#### 2. Data Generation Interface
- Date range inputs (start/end)
- Random seed input
- Generate button
- Saves to session: `raw_data`, `data_source`, `generation_params`

#### 3. Data Preview
- Shows first 20 rows in interactive table
- Download CSV button

#### 4. Summary Statistics
- 4 metric cards: Total observations, date range, missing values, outliers
- Detailed statistics table (mean, std, min, max, etc.)

#### 5. Quick Visualization
- Plotly line chart: Bookings over time
- Interactive zoom/pan

#### 6. Data Quality Checks
- Duplicate dates check
- Continuous date range check
- Missing value analysis
- Outlier detection (Z-score method)
- Data type validation
- Negative value check
- Color-coded status badges

#### 7. Navigation
- "Proceed to EDA" button → Page 2

**Session State Keys Set:**
- `raw_data` - Main DataFrame
- `data_source` - 'synthetic' or 'uploaded'
- `generation_params` - Dict with generation settings

---

### 5-10. page2_eda.py through page7_mlops.py

**Purpose:** Placeholder pages for future implementation

**Current Structure:**
```python
def show():
    # Header with icon and title
    # Subtitle
    # Check if data loaded
    # Display "under construction" message
```

**To Be Implemented:**
- **Page 2:** Time series decomposition, seasonality analysis, correlations, stationarity tests
- **Page 3:** Train/test split, feature engineering, transformations
- **Page 4:** ARIMA, Prophet, XGBoost, RF, LightGBM training
- **Page 5:** Forecast generation, backtesting, scenarios
- **Page 6:** Business KPIs, marketing optimization, ROI analysis
- **Page 7:** Performance monitoring, drift detection, retraining

---

### 11. requirements.txt

**Purpose:** Python package dependencies

**Packages:**
```
streamlit==1.31.0          # Web framework
pandas==2.1.4              # Data manipulation
numpy==1.26.3              # Numerical computing
plotly==5.18.0             # Interactive visualizations
scipy==1.11.4              # Scientific computing
statsmodels==0.14.1        # Statistical models (ARIMA, etc.)
scikit-learn==1.3.2        # ML algorithms
xgboost==2.0.3             # Gradient boosting
lightgbm==4.2.0            # Gradient boosting
prophet==1.1.5             # Time series forecasting
matplotlib==3.8.2          # Static plots
seaborn==0.13.1            # Statistical visualizations
```

**Installation Time:** ~5-10 minutes
**Total Size:** ~500MB

---

## 🔑 Key Design Patterns

### 1. Session State Usage
All data persists across pages using `st.session_state`:
```python
# Save
save_to_session('raw_data', df)

# Load
df = load_from_session('raw_data')
```

### 2. Page Structure
Every page follows this pattern:
```python
def show():
    # 1. Header
    # 2. Check data loaded
    # 3. Main content
    # 4. Navigation buttons
```

### 3. Error Handling
Graceful error handling with user-friendly messages:
```python
try:
    # Operation
except Exception as e:
    st.error(f"❌ Error: {str(e)}")
```

### 4. Caching
Expensive operations use Streamlit caching:
```python
@st.cache_data
def generate_synthetic_data(...):
    # Only runs once per unique inputs
```

---

## 📊 Data Flow

```
User Input → Data Generation/Upload → Session Storage → Validation
    ↓
Data Preview → Quality Checks → Visualization
    ↓
Navigation → Next Page (EDA) → Access same data from session
```

---

## 🎨 Styling Conventions

### Colors
- Primary: `#1f77b4` (blue)
- Success: `#00c853` (green)
- Warning: `#ffc107` (yellow)
- Error: `#ff5252` (red)
- Background: `#f0f2f6` (light gray)

### Typography
- Headers: `2.5rem`, bold
- Subheaders: `1.2rem`, gray
- Metrics: `1.5rem` or `2rem`, bold, blue

### Layout
- Use `st.columns()` for multi-column layouts
- Cards with border-left accent
- Consistent spacing with `<br>` or margins

---

## 🧪 Testing Checklist

- [ ] All imports work
- [ ] Data generates successfully
- [ ] Session state persists
- [ ] Navigation works
- [ ] Reset button clears data
- [ ] No console errors
- [ ] Responsive design
- [ ] Download buttons work

---

## 📈 Metrics

**Phase 1 Complete:**
- Total lines of code: ~1,200
- Core files: 4
- Page files: 7
- Test coverage: Data acquisition page
- Estimated development time: 4-6 hours

**Remaining (Phases 2-4):**
- Estimated additional lines: ~3,000
- Development time: 12-16 hours
- Total app size: ~4,200 lines

---

This reference should help you quickly understand the role and contents of each file in the application!
